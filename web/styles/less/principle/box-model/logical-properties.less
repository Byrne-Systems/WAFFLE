/*
 *  Set:    CSS Logical Properties
 *  Notes:  Module that defines how page switch, orphans, and widows are handled.
 */

/* Block-Size */
// Defines the horizontal or vertical size of an
// element's block depending on it's writing mode.
// - CCS~(experimental)
.block-size(@arg) {
    block-size: @arg;
    // > <'width'>
}

/* Border-Block-End */
// Setting the individual logical block end border
// property values in a single place in the style sheet.
// - CCS~(experimental)
.border-block-end(@arg) {
    border-block-end: @arg;
    // > <'border-width'> || <'border-style'> || <'color'>
}

/* Border-Block-End-Color */
// Defines the color of the logical block end border of
// an element.
// - CCS~(experimental)
.border-block-end-color(@arg) {
    border-block-end-color: @arg;
    // > <'color'>
}

/* Border-Block-End-Style */
// Defines the style of the logical block end border of
// an element.
// - CCS~(experimental)
.border-block-end-style(@arg) {
    border-block-end-style: @arg;
    // > <'border-style'>
}

/* Border-Block-End-Width */
// Defines the width of the logical block end border of
// an element.
// - CCS~(experimental)
.border-block-end-width(@arg) {
    border-block-end-width: @arg;
    // > <'border-width'>
}

/* Border-Block-Start */
// Setting the individual logical block start border
// property values in a single place in the style sheet.
// - CCS~(experimental)
.border-block-start(@arg) {
    border-block-start: @arg;
    // > <'border-width'> || <'border-style'> || <'color'>
}

/* Border-Block-Start-Color */
// Defines the color of the logical block start border
// of an element.
// - CCS~(experimental)
.border-block-start-color(@arg) {
    border-block-start-color: @arg;
    // > <'color'>
}

/* Border-Block-Start-Style */
// Defines the style of the logical block start border
// of an element.
// - CCS~(experimental)
.border-block-start-style(@arg) {
    border-block-start-style: @arg;
    // > <'border-style'>
}

/* Border-Block-Start-Width */
// Defines the width of the logical block start border
// of an element.
// - CCS~(experimental)
.border-block-start-width(@arg) {
    border-block-start-width: @arg;
    // > <'border-width'>
}

/* Border-Inline-End */
// Setting the individual logical inline end border
// property values in a single place in the style sheet.
// - CCS~(experimental)
.border-inline-end(@arg) {
    border-inline-end: @arg;
    // > <'border-width'> || <'border-style'> || <'color'>
}

/* Border-Inline-End-Color */
// Defines the color of the logical inline end border of
// an element
// - CCS~(experimental)
.border-inline-end-color(@arg) {
    border-inline-end-color: @arg;
    // > <'color'>
}

/* Border-Inline-End-Style */
// Defines the style of the logical inline end border of
// an element
// - CCS~(experimental)
.border-inline-end-style(@arg) {
    border-inline-end-style: @arg;
    // > <'border-style'>
}

/* Border-Inline-End-Width */
// Defines the width of the logical inline end border of
// an element.
// - CCS~(experimental)
.border-inline-end-width(@arg) {
    border-inline-end-width: @arg;
    // > <'border-width'>
}

/* Border-Inline-Start */
// Setting the individual logical inline start border
// property values in a single place in the style sheet.
// - CCS~(experimental)
.border-inline-start(@arg) {
    border-inline-start: @arg;
    // > (<'border-width'>, <'border-style'>, <'color'>)
}

/* Border-Inline-Start-Color */
// Defines the color of the logical inline start border
// of an element.
// - CCS~(experimental)
.border-inline-start-color(@arg) {
    border-inline-start-color: @arg;
    // > <'color'>
}

/* Border-Inline-Start-Style */
// Defines the style of the logical inline start border
// of an element.
// - CCS~(experimental)
.border-inline-start-style(@arg) {
    border-inline-start-style: @arg;
    // > <'border-style'>
}

/* Border-Inline-Start-Width */
// Defines the width of the logical inline start border
// of an element.
// - CCS~(experimental)
.border-inline-start-width(@arg) {
    border-inline-start-width: @arg;
    // > <'border-width'>
}

/* Inline-Size */
// Defines the horizontal or vertical size of an
// element's block depending on it's writing mode.
// - CCS~(experimental)
.inline-size(@arg) {
    inline-size: @arg;
    // > <'width'>
}

/* Margin-Block-End */
// Defines the logical block end margin of an element.
// - CCS~(experimental)
.margin-block-end(@arg) {
    margin-block-end: @arg;
    // > <'margin-left'>
}

/* Margin-Block-Start */
// Defines the logical block start margin of an element.
// - CCS~(experimental)
.margin-block-start(@arg) {
    margin-block-start: @arg;
    // > <'margin-left'>
}

/* Margin-Inline-End */
// Defines the logical inline end margin of an element.
// - CCS~(experimental)
.margin-inline-end(@arg) {
    margin-inline-end: @arg;
    // > <'margin-left'>
}

/* Margin-Inline-Start */
// Defines the logical inline end margin of an element.
// - CCS~(experimental)
.margin-inline-start(@arg) {
    margin-inline-start: @arg;
    // > <'margin-left'>
}

/* Max-Block-Size */
// Defines the horizontal or vertical maximal size of an
// element's block depending on its writing mode.
// - CCS~(experimental)
.max-block-size(@arg) {
    max-block-size: @arg;
    // > <'max-width'>
}

/* Max-Inline-Size */
// Defines the horizontal or vertical maximal size of an
// element's block depending on its writing mode.
// - CCS~(experimental)
.max-inline-size(@arg) {
    max-inline-size: @arg;
    // > <'max-width'>
}

/* Min-Block-Size */
// Defines the horizontal or vertical minimal size of an
// element's block depending on its writing mode.
// - CCS~(experimental)
.min-block-size(@arg) {
    min-block-size: @arg;
    // > <'max-width'>
}

/* Min-Inline-Size */
// Defines the horizontal or vertical minimal size of an
// element's block depending on its writing mode.
// - CCS~(experimental)
.min-inline-size(@arg) {
    min-inline-size: @arg;
    // > <'max-width'>
}

/* Offset-Block-End */
// Defines the logical block end offset of an element.
// - CCS~(experimental)
.offset-block-end(@arg) {
    offset-block-end: @arg;
    // > <'left'>
}

/* Offset-Block-Start */
// Defines the logical block start offset of an element.
// - CCS~(experimental)
.offset-block-start(@arg) {
    offset-block-start: @arg;
    // > <'left'>
}

/* Offset-Inline-End */
// Defines the logical inline end offset of an element.
// - CCS~(experimental)
.offset-inline-end(@arg) {
    offset-inline-end: @arg;
    // > <'left'>
}

/* Offset-Inline-Start */
// Defines the logical inline start offset of an element.
// - CCS~(experimental)
.offset-inline-start(@arg) {
    offset-inline-start: @arg;
    // > <'left'>
}

/* Padding-Block-End */
// Defines the logical block end padding of an element.
// - CCS~(experimental)
.padding-block-end(@arg) {
    padding-block-end: @arg;
    // > <'padding-left'>
}

/* Padding-Block-Start */
// Defines the logical block start padding of an element
// - CCS~(experimental)
.padding-block-start(@arg) {
    padding-block-start: @arg;
    // > <'padding-left'>
}